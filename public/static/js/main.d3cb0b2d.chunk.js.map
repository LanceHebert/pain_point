{"version":3,"sources":["Components/Login.js","Components/Signup.js","Components/LoginDecider.js","Components/BodyDiagram.js","Components/YoutubeEmbed.js","Components/ExerciseCard.js","Components/Exercises.js","Components/Results.js","Components/RoutineCard.js","Components/RoutineSelect.js","Components/SplashPage.js","App.js","reportWebVitals.js","index.js"],"names":["Login","setShowLogin","setUser","setErrors","setIsLoading","errors","isLoading","useState","username","password","loginForm","setLoginForm","className","Form","Group","controlId","Control","type","placeholder","onChange","e","target","value","Check","label","Button","variant","onClick","preventDefault","fetch","method","headers","body","JSON","stringify","then","r","ok","json","user","err","handleSubmit","map","Signup","password_confirmation","signupForm","setSignupForm","id","handleSignupSubmit","LoginDecider","handleLogoutClick","showLogin","Navbar","expand","Container","Brand","href","alt","src","width","Toggle","aria-controls","Collapse","autoPlay","loop","muted","BodyDiagram","setRegionSelected","regionSelected","buttonValue","setButtonValue","navigate","useNavigate","muscleID","setMuscleID","handleImgClick","localStorage","clear","name","advanced","muscle_group_id","find","muscle","region","setItem","useEffect","muscles","checked","onlabel","onstyle","offlabel","offstyle","style","console","log","YoutubeEmbed","embedId","height","frameBorder","allow","allowFullScreen","title","ExerciseCard","exercise","routine_id","parseInt","getItem","exercise_id","reps","tband","sets","RPE","newExercise","setNewExercise","showExercise","setShowExercise","showSubmitExercise","setShowSubmitExercise","videoEmbed","description","recreps","recsets","Row","as","Col","Label","Select","defaultValue","returnPostData","Exercises","exerciseStore","setExerciseStore","isTrueSet","modalShow","setModalShow","exercises","exerciseMap","filter","muscle_group","regionBackup","lg","uuid","MyVerticallyCenteredModal","props","Modal","size","aria-labelledby","centered","Header","closeButton","Body","color","Footer","onHide","class","icon","show","Results","allInfoStore","setAllInfoStore","data","setData","regionArr","setRegionArr","painData","setPainData","setsReps","setSetsReps","reverseDate","length","splitDate","date","split","calcAvgExercise","tempHolder","session","i","toFixed","checkResult","pain","Spinner","animation","allInfo","regionChosenFilter","instance","graphRPE","painArr","graphPain","neck","back","shoulder","knee","sessions","graphRegion","setsHolder","repsHolder","hereBeCombinedStatObj","set_stats","statInstance","avgRepsPerSet","avgTotalSets","graphRepsSets","COLORS","RADIAN","Math","PI","a","hereBeData","avgRPE","Card","ResponsiveContainer","PieChart","Pie","cx","cy","labelLine","midAngle","innerRadius","outerRadius","percent","radius","index","x","cos","y","sin","fill","textAnchor","dominantBaseline","dataKey","entry","Cell","Legend","ComposedChart","margin","top","right","bottom","left","CartesianGrid","stroke","XAxis","scale","YAxis","domain","Tooltip","Bar","barSize","Line","AreaChart","x1","y1","x2","y2","offset","stopColor","stopOpacity","Area","strokeDasharray","stackId","RoutineCard","routine","setRoutines","routines","Title","rInstance","RoutineSelect","Date","toLocaleDateString","holdey","holdey2","holder","holder2","showSubmitPain","setShowSubmitPain","painStatStore","setPainStatStore","filteredRoutines","advancedBackup","mappedRoutines","DefaultValue","postReturnData","SplashPage","setShow","handleClose","backdrop","keyboard","App","Nav","Link","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3cb0b2d.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { Form, Button } from \"react-bootstrap\";\n\nfunction Login({\n  setShowLogin,\n  setUser,\n  setErrors,\n  setIsLoading,\n  errors,\n  isLoading,\n}) {\n  const [loginForm, setLoginForm] = useState({\n    username: \"\",\n    password: \"\",\n  });\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    setIsLoading(true);\n    fetch(\"/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(loginForm),\n    }).then((r) => {\n      setIsLoading(false);\n      if (r.ok) {\n        r.json().then((user) => setUser(user));\n      } else {\n        r.json().then((err) => setErrors(err.errors));\n      }\n    });\n  }\n\n  return (\n    <div className=\"loginForm \">\n      <Form className=\"rounded p-4 p-sm-3 \">\n        <h2 className=\"titleCard\">LOGIN</h2>\n        <Form.Group className=\"mb-3 shadow\" controlId=\"formBasicUsername\">\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Enter Username\"\n            onChange={(e) =>\n              setLoginForm({ ...loginForm, username: e.target.value })\n            }\n          />\n        </Form.Group>\n        <Form.Group className=\"mb-3 shadow\" controlId=\"formBasicPassword\">\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Enter Password\"\n            onChange={(e) =>\n              setLoginForm({ ...loginForm, password: e.target.value })\n            }\n          />\n        </Form.Group>\n        <Form.Group className=\"mb-3 checky\" controlId=\"formBasicCheckBox\">\n          <Form.Check type=\"checkbox\" label=\"Remember Me\" />\n        </Form.Group>\n        <div className=\"mb-3\">\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            onClick={(e) => handleSubmit(e)}\n            className=\"loginButton\"\n          >\n            {isLoading ? \"Loading...\" : \"Login\"}\n          </Button>\n        </div>\n        <Form.Group className=\"errors rounded\" controlId=\"formBasicErrors\">\n          {errors.map((err) => (\n            <p className=\"signErrors\" key={err}>\n              ✖️ {err}✖️\n            </p>\n          ))}\n        </Form.Group>\n        <button className=\"astext\" onClick={() => setShowLogin(false)}>\n          <span className=\"astext\">Don't have account yet?</span>{\" \"}\n          <span className=\"asTextBold\">Sign up!</span>\n        </button>\n      </Form>\n    </div>\n  );\n}\n\nexport default Login;\n","import { useState } from \"react\";\nimport { Form, Button } from \"react-bootstrap\";\n\nfunction Signup({ setUser, setIsLoading, setErrors, errors, isLoading }) {\n  const [signupForm, setSignupForm] = useState({\n    username: \"\",\n    password: \"\",\n    password_confirmation: \"\",\n  });\n\n  function handleSignupSubmit(e) {\n    e.preventDefault();\n\n    setIsLoading(true);\n    fetch(\"/signup\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(signupForm),\n    }).then((r) => {\n      setIsLoading(false);\n      if (r.ok) {\n        r.json().then((user) => setUser(user));\n      } else {\n        r.json().then((err) => setErrors(err.errors));\n      }\n    });\n  }\n\n  return (\n    <div className=\"loginForm\">\n      <Form className=\"rounded p-4 p-sm-3 \">\n        <h2 className=\"titleCard\">Register</h2>\n        <Form.Group className=\"mb-3 shadow\" controlId=\"formBasicUsername\">\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Enter Username\"\n            onChange={(e) =>\n              setSignupForm({ ...signupForm, username: e.target.value })\n            }\n          />\n        </Form.Group>\n        <Form.Group className=\"mb-3 shadow\" controlId=\"formBasicPassword\">\n          <Form.Control\n            type=\"password\"\n            id=\"password\"\n            placeholder=\"Enter Password\"\n            onChange={(e) =>\n              setSignupForm({ ...signupForm, password: e.target.value })\n            }\n          />\n        </Form.Group>\n        <Form.Group\n          className=\"mb-3 shadow\"\n          controlId=\"formBasicPasswordConfirmation\"\n        >\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Re-Enter Password\"\n            id=\"password_confirmation\"\n            onChange={(e) =>\n              setSignupForm({\n                ...signupForm,\n                password_confirmation: e.target.value,\n              })\n            }\n          />\n        </Form.Group>\n        <Form.Group className=\"mb-3 checky\" controlId=\"formBasicCheckBox\">\n          <Form.Check type=\"checkbox\" label=\"Remember Me\" />\n        </Form.Group>\n        <Button\n          className=\"mb-3 loginButton\"\n          variant=\"primary\"\n          type=\"submit\"\n          onClick={(e) => handleSignupSubmit(e)}\n        >\n          {isLoading ? \"Loading...\" : \"Sign Up\"}\n        </Button>\n        <Form.Group className=\"mb-3 rounded\" controlId=\"formBasicErrors\">\n          {errors.map((err) => (\n            <p className=\"signErrors\" key={err}>\n              ✖️ {err}✖️\n            </p>\n          ))}\n        </Form.Group>\n      </Form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import { useState } from \"react\";\nimport Login from \"./Login\";\nimport Signup from \"./Signup\";\nimport { Nav, Container, Navbar, NavDropdown } from \"react-bootstrap\";\n\nfunction LoginDecider({ setUser, handleLogoutClick }) {\n  const [showLogin, setShowLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errors, setErrors] = useState([]);\n\n  return (\n    <div>\n      <Navbar className=\"color-nav  justify-content-start\" expand=\"lg\">\n        <Container>\n          <Navbar.Brand href=\"/\">\n            <img\n              alt=\"\"\n              src=\"/images/logoWhite.png\"\n              width=\"20\"\n              // height=\"30\"\n              className=\"d-inline-block align-top logo\"\n            />\n            <span className=\"navTitle\">Pain Point</span>\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\"></Navbar.Collapse>\n        </Container>\n      </Navbar>\n\n      {showLogin ? (\n        <div>\n          <video autoPlay loop id=\"video-background\" muted>\n            <source src=\"/videos/runningVid.mp4\" type=\"video/mp4\" />\n          </video>\n          <div className=\"App-headerColor\">\n            <Login\n              setUser={setUser}\n              setShowLogin={setShowLogin}\n              setIsLoading={setIsLoading}\n              setErrors={setErrors}\n              errors={errors}\n              isLoading={isLoading}\n            />\n          </div>\n        </div>\n      ) : (\n        <div>\n          <video autoPlay loop id=\"video-background\" muted>\n            <source src=\"/videos/runningVid.mp4\" type=\"video/mp4\" />\n          </video>\n          <div className=\"App-headerColor\">\n            <Signup\n              setUser={setUser}\n              setIsLoading={setIsLoading}\n              setErrors={setErrors}\n              errors={errors}\n              isLoading={isLoading}\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default LoginDecider;\n","import { useEffect, useState } from \"react\";\nimport BootstrapSwitchButton from \"bootstrap-switch-button-react\";\nimport { useNavigate } from \"react-router-dom\";\n\n\nfunction BodyDiagram({\n  setRegionSelected,\n  regionSelected,\n  buttonValue,\n  setButtonValue,\n}) {\n  let navigate = useNavigate();\n  const [muscleID, setMuscleID] = useState([]);\n  \n  \n// Fetching muscle groups \n  useEffect(() => {\n    localStorage.clear();\n    fetch(\"/muscle_groups\")\n      .then((r) => r.json())\n      .then((muscles) => {\n        setMuscleID(muscles);\n      });\n  }, []);\n\n  // Clearing Local storage when coming back to Body Diagram page,setting region selected state and storing in local storage as well\n  function handleImgClick(e) {\n    localStorage.clear();\n\n    setRegionSelected({\n      name: e.target.id,\n      advanced: buttonValue,\n      muscle_group_id: muscleID.find((muscle) => muscle.region === e.target.id)\n        .id,\n    });\n    localStorage.setItem(\n      \"muscle_group_id\",\n      muscleID.find((muscle) => muscle.region === e.target.id).id\n    );\n\n    // on image click send to next page routines\n    navigate(`/routines/`);\n  }\n\n  return (\n    <div className=\"App-header\">\n      <div>\n        <h2 className=\"BodyTitle\">Point to your pain</h2>\n        <div>\n          <img\n            className=\"grow\"\n            src=\"/images/back.png\"\n            alt=\"back region\"\n            id=\"back\"\n            onClick={(e) => {\n              handleImgClick(e);\n            }}\n          />\n          <img\n            className=\"grow\"\n            src=\"/images/neck.png\"\n            alt=\"neck region\"\n            id=\"neck\"\n            onClick={(e) => handleImgClick(e)}\n          />\n        </div>\n        <img\n          className=\"grow\"\n          src=\"/images/knee.png\"\n          alt=\"knee region\"\n          id=\"knee\"\n          onClick={(e) => handleImgClick(e)}\n        />\n        <img\n          className=\"grow\"\n          src=\"/images/shoulder.png\"\n          alt=\"shoulder region\"\n          id=\"shoulder\"\n          onClick={(e) => handleImgClick(e)}\n        />\n      </div>\n      {/* Cool light switch type button, stores if workout is advanced or novice */}\n      <div className=\"switchButton\">\n        <BootstrapSwitchButton\n          checked={false}\n          onlabel=\"Advanced exercises\"\n          onstyle=\"danger\"\n          offlabel=\"Novice exercises\"\n          offstyle=\"success\"\n          style={\"w-50 mx-3\"}\n          onChange={() => {\n            console.log(buttonValue);\n            console.log(regionSelected);\n            setButtonValue(!buttonValue);\n          }}\n        />\n      </div>\n      <div id=\"footer\">\n        <h6>\n          <a href=\"https://www.vecteezy.com/free-vector/body-pain\">\n            Body Pain Vectors by Vecteezy\n          </a>\n        </h6>\n      </div>\n    </div>\n  );\n}\n\nexport default BodyDiagram;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst YoutubeEmbed = ({ embedId }) => (\n  <div className=\"video-responsive\">\n    <iframe\n      width=\"853\"\n      height=\"480\"\n      src={`https://www.youtube.com/embed/${embedId}`}\n      frameBorder=\"0\"\n      allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n      allowFullScreen\n      title=\"Embedded youtube\"\n    />\n  </div>\n);\n\nYoutubeEmbed.propTypes = {\n  embedId: PropTypes.string.isRequired,\n};\n\nexport default YoutubeEmbed;\n","import { useState } from \"react\";\nimport { Row, Col, Button, Form } from \"react-bootstrap\";\nimport YoutubeEmbed from \"./YoutubeEmbed\";\nimport { useNavigate } from \"react-router-dom\";\n\nfunction ExerciseCard({ exercise }) {\n  let navigate = useNavigate();\n\n  const [newExercise, setNewExercise] = useState({\n    routine_id: parseInt(localStorage.getItem(\"routineNumber\")),\n    exercise_id: exercise.id,\n    reps: 0,\n    tband: \"\",\n    sets: 0,\n    RPE: 1,\n  });\n  const [showExercise, setShowExercise] = useState(false);\n  const [showSubmitExercise, setShowSubmitExercise] = useState(false);\n// When invoked opens up form to show more inputs\n  function showExerciseForm() {\n    setShowExercise(true);\n    setShowSubmitExercise(false);\n  }\n  // Posting to backend the exercise stats entered\n  function handleSubmitExercise() {\n    fetch(\"/set_stats\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(newExercise),\n    })\n      .then((r) => r.json())\n      .then((returnPostData) => {\n        localStorage.setItem(\"exerciseEntered\", true);\n        console.log(returnPostData);\n      });\n  }\n\n  return (\n    <div>\n      <div className=\"card\">\n        <YoutubeEmbed embedId={exercise.videoEmbed} />\n        <div id=\"extraControl\">\n        <div className=\"card-body\">\n          <h2 className=\"card-title\">{exercise.name}</h2>\n          <div id=\"cardSizing\">\n          <p className=\"card-text\">{exercise.description}</p>\n          </div>\n          <p className=\"pSmallPrint\">\n            Recommended sets: <br />\n            {exercise.recreps} reps for {exercise.recsets} sets\n          </p>\n          \n          {/* Ternary to show if user decided to start exercise */}\n          {showExercise ? (\n            <>\n              <p className=\"card-text\">\n                Based on the Recommended sets, how did you do?\n              </p>\n              <Form id=\"alternateGradient\">\n                <Row className=\"mb-3\">\n                  <Form.Group as={Col} controlId=\"formGridSets\">\n                    <Form.Label>Completed Recommended Sets </Form.Label>\n                    <Form.Control\n                      type=\"number\"\n                      placeholder=\"Enter Sets\"\n                      onChange={(e) => {\n                        e.preventDefault();\n                        setNewExercise({\n                          ...newExercise,\n                          sets: parseInt(e.target.value),\n                        });\n                      }}\n                    />\n                  </Form.Group>\n\n                  <Form.Group as={Col} controlId=\"formGridReps\">\n                    <Form.Label># of reps of incomplete set</Form.Label>\n                    <Form.Control\n                      type=\"number\"\n                      placeholder=\"Enter Reps\"\n                      onChange={(e) => {\n                        e.preventDefault();\n                        setNewExercise({\n                          ...newExercise,\n                          reps: parseInt(e.target.value),\n                        });\n                      }}\n                    />\n                  </Form.Group>\n                </Row>\n\n                <Row className=\"mb-3\">\n                  <Form.Group as={Col} controlId=\"formGridTband\">\n                    <Form.Label>TheraBand Used?</Form.Label>\n                    <Form.Select\n                      defaultValue=\"None\"\n                      onChange={(e) => {\n                        e.preventDefault();\n                        setNewExercise({\n                          ...newExercise,\n                          tband: e.target.value,\n                        });\n                      }}\n                    >\n                      <option>None</option>\n                      <option>Yellow</option>\n                      <option>Red</option>\n                      <option>Green</option>\n                      <option>Blue</option>\n                      <option>Black</option>\n                      <option>Silver</option>\n                      <option>Gold</option>\n                    </Form.Select>\n                  </Form.Group>\n\n                  <Form.Group as={Col} controlId=\"formGridRPE\">\n                    <Form.Label>Rate of Perceived Exertion</Form.Label>\n                    <Form.Select\n                      defaultValue=\"RPE\"\n                      onChange={(e) => {\n                        e.preventDefault();\n                        setNewExercise({\n                          ...newExercise,\n                          RPE: parseInt(e.target.value),\n                        });\n                      }}\n                    >\n                      <option>1</option>\n                      <option>2</option>\n                      <option>3</option>\n                      <option>4</option>\n                      <option>5</option>\n                      <option>6</option>\n                      <option>7</option>\n                      <option>8</option>\n                      <option>9</option>\n                      <option>10</option>\n                    </Form.Select>\n                  </Form.Group>\n                </Row>\n                {showSubmitExercise ? (\n                  \"Submitted ✔️\"\n                ) : (\n                  <Button\n                    variant=\"primary\"\n                    onClick={(e) => {\n                      e.preventDefault();\n                      setShowSubmitExercise(true);\n                      handleSubmitExercise();\n                    }}\n                  >\n                    Submit\n                  </Button>\n                )}\n              </Form>\n            </>\n          ) : (\n            <Button variant=\"primary\" onClick={showExerciseForm}>\n              Start Exercise\n            </Button>\n          )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ExerciseCard;\n","import { useEffect, useState } from \"react\";\nimport ExerciseCard from \"./ExerciseCard\";\nimport uuid from \"react-uuid\";\nimport { Button,  Modal, Container, Row, Col } from \"react-bootstrap\";\nimport { useNavigate } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction Exercises({ regionSelected, setRegionSelected }) {\n  const [exerciseStore, setExerciseStore] = useState([]);\n  const isTrueSet = localStorage.getItem(\"advancedBackup\") === \"true\";\n\n  const [modalShow, setModalShow] = useState(false);\n\n  let navigate = useNavigate();\n\n  useEffect(\n    () =>\n      fetch(`/exercises`)\n        .then((r) => r.json())\n        .then((exercises) => {\n          console.log(exercises);\n          setExerciseStore(exercises);\n        }),\n    []\n  );\n\n  useEffect(\n    () =>\n      setRegionSelected({\n        ...regionSelected,\n        name: localStorage.getItem(\"region\"),\n      }),\n    []\n  );\n// Check to make sure Region exercises are equal to muscle group even on page refresh\n  const filterRegionExercises = exerciseStore.filter(\n    (exercise) =>\n      (regionSelected.name === exercise.muscle_group.region ||\n        regionSelected.regionBackup === exercise.muscle_group.region) &&\n      isTrueSet === exercise.advanced\n  );\n\n  const exerciseMap = filterRegionExercises.map((exercise) => {\n    return (\n      <Col lg={6} className=\"pb-3 routineCard\">\n        <ExerciseCard\n          key={uuid()}\n          exercise={exercise}\n          regionSelected={regionSelected}\n        />\n      </Col>\n    );\n  });\n\n  function MyVerticallyCenteredModal(props) {\n    return (\n      <Modal\n        {...props}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header closeButton></Modal.Header>\n        <Modal.Body>\n          <h4 style={{color: \"red\" }}>Error</h4>\n          <p>\n            Must fill out and submit at least one exercise for this session.\n          </p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button onClick={props.onHide}>Close</Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n\n  return (\n    <div className=\"exerciseContainer\">\n      <section id=\"features\">\n        <div class=\"row\">\n          <div class=\"col-md-4 col-12\">\n            <i className=\"fas fa-heart icon-format\"></i>\n            <h3 class=\"feature-title\">\n              Rate of Perceived exertion should be kept below 8\n            </h3>\n            <p>\n              RPE—or the Rate of Perceived Exertion—is a scale used to identify\n              the intensity of your exercise based on how hard you feel (or\n              perceive) your effort to be. Its subjective so don't go over what\n              YOU consider an 8 while completing these exercises.\n            </p>\n          </div>\n          <div class=\"col-md-4 col-12\">\n            <FontAwesomeIcon icon=\"fa-solid fa-circle-radiation\" />\n            <i class=\"fas fa-check-circle icon-format\"></i>\n            <h3 class=\"feature-title\">Don't \"push\" through pain</h3>\n            <p>Exercise should be mostly pain free and comfortable</p>\n          </div>\n          <div class=\"col-md-4 col-12\">\n            <i class=\"fas fa-bullseye icon-format\"></i>\n            <h3 class=\"feature-title\">\n              Stretch minimum is 30 second hold for 3 sets\n            </h3>\n            <p>\n              Studies show that for stretching to be effective,stretch must be\n              held at least 30 seconds, three times daily\n            </p>\n          </div>\n        </div>\n      </section>\n\n      <h1 className=\"exerciseTitle\">Routine</h1>\n\n      <Container className=\"exerciseContainer\">\n        <Row>{exerciseMap}</Row>\n      </Container>\n      <Button\n        className=\"resultsButton\"\n        variant=\"danger\"\n        onClick={(e) => {\n          e.preventDefault();\n\n          localStorage.getItem(\"exerciseEntered\")\n            ? navigate(\"/results\")\n            : setModalShow(true);\n        }}\n      >\n        See Your Results\n      </Button>\n      <MyVerticallyCenteredModal\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n      />\n    </div>\n  );\n}\n\nexport default Exercises;\n","import { useEffect, useState } from \"react\";\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Bar,\n  Cell,\n  Legend,\n  \n  ComposedChart,\n  Line,\n} from \"recharts\";\nimport { Spinner, Card, Container, Row, Col } from \"react-bootstrap\";\n\nfunction Results() {\n  const [allInfoStore, setAllInfoStore] = useState([]);\n  \n  const [data, setData] = useState([]);\n  const [regionArr, setRegionArr] = useState([]);\n  const [painData, setPainData] = useState([]);\n  const [setsReps, setSetsReps] = useState([]);\n  \n\n  useEffect(\n    () =>\n      fetch(\"/routines\")\n        .then((r) => r.json())\n        .then((allInfo) => {\n          // Filtering all sessions to just be the one with correct region\n          const regionChosenFilter = allInfo.filter((instance) => {\n            return (\n              instance.muscle_group.id ===\n              parseInt(localStorage.getItem(\"muscle_group_id\"))\n            );\n          });\n          // Invoking logic for each Chart\n          localStorage.setItem(\"initialPain\", regionChosenFilter[0].pain);\n\n          graphRPE(regionChosenFilter);\n          graphPain(regionChosenFilter);\n          graphRegion(allInfo);\n          graphRepsSets(regionChosenFilter);\n          setAllInfoStore(allInfo);\n          checkResult(regionChosenFilter);\n          calcAvgExercise(allInfo);\n          reverseDate();\n        }),\n    []\n  );\n\n\n  function reverseDate(){\n    if (allInfoStore.length > 0)\n    {\n     const splitDate =  allInfoStore[allInfoStore.length - 1].date.split('-')\n     const newDate =  splitDate[2]+ '-' + splitDate[1] + '-' + splitDate[0];\n      return newDate\n    }\n  }\n  function calcAvgExercise() {\n    let tempHolder = 0;\n    // mapping through all sessions\n    if (allInfoStore.length > 1) {\n      allInfoStore.map((session, i) => {\n        tempHolder += session.exercises.length;\n      });\n      return (tempHolder / allInfoStore.length).toFixed(2);\n    }\n  }\n\n  function checkResult() {\n    if (allInfoStore.length > 0) {\n      return (\n        ((allInfoStore[allInfoStore.length - 1].pain -\n          parseInt(localStorage.getItem(\"initialPain\"))) /\n          parseInt(localStorage.getItem(\"initialPain\"))) *\n        100\n      ).toFixed(2);\n    } else {\n      return <Spinner animation=\"border\" variant=\"primary\" />;\n    }\n  }\n\n  // Graph region PIE CHART   ********\n\n  function graphRegion(allInfo) {\n    const neck = allInfo.filter((instance) => {\n      return instance.muscle_group.region === \"neck\";\n    });\n    const back = allInfo.filter((instance) => {\n      return instance.muscle_group.region === \"back\";\n    });\n    const shoulder = allInfo.filter((instance) => {\n      return instance.muscle_group.region === \"shoulder\";\n    });\n    const knee = allInfo.filter((instance) => {\n      return instance.muscle_group.region === \"knee\";\n    });\n\n    setRegionArr([\n      { region: \"Neck\", sessions: neck.length + 1 },      \n      { region: \"Shoulder\", sessions: shoulder.length + 1 },\n      { region: \"Back\", sessions: back.length + 1 },\n      { region: \"Knee\", sessions: knee.length + 1},\n    ]);\n  }\n\n  const COLORS = [\"#0088FE\", \"#00C49F\", \"#FFBB28\", \"#FF8042\"];\n\n  const RADIAN = Math.PI / 180;\n  const renderCustomizedLabel = ({\n    cx,\n    cy,\n    midAngle,\n    innerRadius,\n    outerRadius,\n    percent,\n    index,\n  }) => {\n    const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n    const x = cx + radius * Math.cos(-midAngle * RADIAN);\n    const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n    return (\n      <text\n        x={x}\n        y={y}\n        fill=\"white\"\n        textAnchor={x > cx ? \"start\" : \"end\"}\n        dominantBaseline=\"central\"\n      >\n        {`${(percent * 100).toFixed(0)}%`}\n      </text>\n    );\n  };\n\n  // Graph RPE AREA CHART ******\n  async function graphRPE(regionChosenFilter) {\n    let tempHolder = 0;\n    // mapping through all sessions\n    const hereBeData = regionChosenFilter.map((instance, i) => {\n      // map deeper into each set stats array to get RPE avg\n      instance.set_stats.map((statInstance) => {\n        return (tempHolder += statInstance.RPE);\n      });\n\n      let avgRPE = tempHolder / instance.set_stats.length;\n\n      tempHolder = 0;\n\n      return { session: i + 1, avgRPE: avgRPE };\n    });\n    setData(hereBeData);\n  }\n  // Graph Pain Scatter Chart **************\n  function graphPain(regionChosenFilter) {\n    const painArr = regionChosenFilter.map((instance, i) => {\n      return { session: i + 1, pain: instance.pain };\n    });\n    setPainData(painArr);\n  }\n\n  // Graph Reps and Sets chart ****************************\n  function graphRepsSets(regionChosenFilter) {\n    console.log({ regionChosenFilter });\n\n    let setsHolder = 0;\n    let repsHolder = 0;\n    // mapping through all sessions\n    const hereBeCombinedStatObj = regionChosenFilter.map((instance, i) => {\n      // map deeper into each set stats array to get RPE avg\n      instance.set_stats.map((statInstance) => {\n        setsHolder += statInstance.sets;\n        repsHolder +=\n          (statInstance.reps + statInstance.sets * 20) /\n          (statInstance.sets + 1);\n      });\n\n      let avgRepsPerSet = repsHolder / instance.set_stats.length;\n      let avgTotalSets = setsHolder / instance.set_stats.length;\n\n      console.log({ avgRepsPerSet, avgTotalSets }, i + 1);\n      repsHolder = 0;\n      setsHolder = 0;\n\n      return {\n        session: i + 1,\n        avgRepsPerSet: avgRepsPerSet,\n        avgTotalSets: avgTotalSets,\n      };\n    });\n    setSetsReps(hereBeCombinedStatObj);\n  }\n\n  return (\n    <div className=\"exerciseContainer\">\n      <Container>\n        <Row className=\"pt-5\">\n          <Col lg={6} className=\"\">\n            <Card>\n              <h2 className=\"card-title\">Regions Trained </h2>\n              {regionArr.length > 0 ? (\n                <ResponsiveContainer width=\"100%\" height={400}>\n                  <PieChart width={400} height={400}>\n                    <Pie\n                      data={regionArr}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={renderCustomizedLabel}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"sessions\"\n                    >\n                      {data.map((entry, index) => (\n                        <Cell\n                          key={`cell-${index}`}\n                          fill={COLORS[index % COLORS.length]}\n                        />\n                      ))}\n                    </Pie>\n                    <Legend  />\n                  </PieChart>\n                </ResponsiveContainer>\n              ) : (\n                <Spinner animation=\"border\" variant=\"primary\" />\n              )}\n              <h5><span className=\"neck\">Neck</span> <span className=\"shoulder\">Shoulder</span> <span className=\"back\">Back</span> <span className=\"knee\">Knee</span>  </h5>\n            </Card>\n          </Col>\n          <Col>\n            <Col>\n              <Card className=\"mb-3 me-3 ms-3 p-2 \">\n                <h2 className=\"card-title\">\n                  {\" \"}\n                  {allInfoStore.length > 0 ? (\n                    reverseDate()\n                  ) : (\n                    <Spinner animation=\"border\" variant=\"primary\" />\n                  )}\n                </h2>\n                <h3>Region Selected: {localStorage.getItem(\"region\")}</h3>\n              </Card>\n            </Col>\n            <Col>\n              <Card className=\"m-3 p-2\">\n                <h3>\n                  Initial Pain Level:{\"  \"}\n                  {parseInt(localStorage.getItem(\"initialPain\"))}\n                </h3>\n\n                {allInfoStore.length > 0 ? (\n                  <h3>\n                    Current Pain Level:\n                    {allInfoStore[allInfoStore.length - 1].pain}\n                  </h3>\n                ) : (\n                  <Spinner animation=\"border\" variant=\"primary\" />\n                )}\n                <br />\n\n                {checkResult() > 1 ? (\n                  <h3 className=\"badResult\">\n                    {checkResult()} % increase in pain\n                  </h3>\n                ) : (\n                  <>\n                    <h3 className=\"goodResult\">\n                      <i className=\"fas fa-thumbs-up icon-format\"></i>\n                      {checkResult()}% decrease in pain\n                    </h3>\n                  </>\n                )}\n              </Card>\n            </Col>\n            <Col>\n              <Card className=\"m-3 p-2\">\n                <h3>\n                  {allInfoStore.length > 0 ? (\n                    allInfoStore.length\n                  ) : (\n                    <Spinner animation=\"border\" variant=\"primary\" />\n                  )}{\" \"}\n                  Total Sessions{\" \"}\n                </h3>\n                <h3>Average Exercises per Session: {calcAvgExercise()}</h3>\n              </Card>\n            </Col>\n          </Col>\n        </Row>\n\n        <Row className=\"pt-4 pb-3\">\n          <h2 className=\"card-title\">Session Stats<hr/></h2>\n          <Col className=\"p-1\">\n            <Card>\n              <h2 className=\"card-title\">Pain Level </h2>\n              <ResponsiveContainer width=\"100%\" height={400}>\n                <ComposedChart\n                  width={500}\n                  height={400}\n                  data={painData}\n                  margin={{\n                    top: 20,\n                    right: 20,\n                    bottom: 20,\n                    left: 20,\n                  }}\n                >\n                  <CartesianGrid stroke=\"#f5f5f5\" />\n                  <XAxis dataKey=\"session\" scale=\"band\" />\n                  <YAxis domain={[1, 10]} />\n                  <Tooltip />\n                  <Legend />\n                  <Bar dataKey=\"pain\" barSize={20} fill=\"#413ea0\" />\n                  <Line type=\"monotone\" dataKey=\"pain\" stroke=\"#ff7300\" />\n                </ComposedChart>\n              </ResponsiveContainer>\n            </Card>\n          </Col>\n          <Col className=\"p-1\">\n            <Card>\n              <h2 className=\"card-title\">RPE Average </h2>\n              {data.length > 0 ? (\n                <ResponsiveContainer width=\"100%\" height={400}>\n                  <AreaChart data={data}>\n                    <defs>\n                      <linearGradient id=\"color\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop\n                          offset=\"0%\"\n                          stopColor=\"#2451B7\"\n                          stopOpacity={0.4}\n                        />\n                        <stop\n                          offset=\"75%\"\n                          stopColor=\"#2451B7\"\n                          stopOpacity={0.05}\n                        />\n                      </linearGradient>\n                    </defs>\n                    <Area\n                      dataKey=\"avgRPE\"\n                      stroke=\"#2451B7\"\n                      fill=\"url(#color)\"\n                    />\n                    <XAxis dataKey=\"session\" />\n                    <YAxis dataKey=\"avgRPE\" domain={[1, 10]} />\n                    <Tooltip />\n                    <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n                    <Legend />\n                  </AreaChart>\n                </ResponsiveContainer>\n              ) : (\n                <Spinner animation=\"border\" variant=\"primary\" />\n              )}\n            </Card>\n          </Col>\n          <Col className=\"p-1\">\n            <Card>\n              <h2 className=\"card-title\"> Reps and Sets </h2>\n              <ResponsiveContainer width=\"100%\" height={400}>\n                <AreaChart\n                  width={500}\n                  height={400}\n                  data={setsReps}\n                  margin={{\n                    top: 20,\n                    right: 20,\n                    bottom: 20,\n                    left: 20,\n                  }}\n                >\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"name\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Area\n                    type=\"monotone\"\n                    dataKey=\"avgTotalSets\"\n                    stackId=\"1\"\n                    stroke=\"#8884d8\"\n                    fill=\"#8884d8\"\n                  />\n                  <Area\n                    type=\"monotone\"\n                    dataKey=\"avgRepsPerSet\"\n                    stackId=\"1\"\n                    stroke=\"#82ca9d\"\n                    fill=\"#82ca9d\"\n                  />\n\n                  <Legend />\n                </AreaChart>\n              </ResponsiveContainer>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default Results;\n","import React from \"react\";\nimport { Button, Card } from \"react-bootstrap\";\n\nfunction RoutineCard({ routine, setRoutines, routines }) {\n  console.log({ routine });\n  function handleDelete() {\n    fetch(`/routines/${routine.id}`, {\n      method: \"DELETE\",\n    }).then(() =>\n      setRoutines(routines.filter((rInstance) => rInstance.id !== routine.id))\n    );\n  }\n\n  return (\n    <div className=\"routineBorderCard\">\n      <Card>\n        <Card.Header className=\"routineCardHeader\">\n          Session: {routine.routine} - {routine.muscle_group.region}\n        </Card.Header>\n        <Card.Body>\n          <Card.Title>{routine.date}</Card.Title>\n\n          <Button\n            variant=\"danger\"\n            onClick={(e) => {\n              handleDelete(e);\n            }}\n          >\n            Delete\n          </Button>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n}\n\nexport default RoutineCard;\n","import React, { useEffect, useState } from \"react\";\nimport uuid from \"react-uuid\";\nimport RoutineCard from \"./RoutineCard\";\nimport { Button, Form, Container, Row, Col } from \"react-bootstrap\";\n\nimport { useNavigate } from \"react-router-dom\";\n\nfunction RoutineSelect({ regionSelected, setRegionSelected }) {\n  let navigate = useNavigate();\n\n  const [routines, setRoutines] = useState([]);\n  const [date, setDate] = useState(new Date());\n  const [postRoutine, setPostRoutine] = useState({\n    routine: 1,\n    date: date.toLocaleDateString(),\n    muscle_group_id: 0,\n    pain: 0,\n  });\n  const holdey = localStorage.getItem(\"region\");\n  const holdey2 = localStorage.getItem(\"advancedBackup\");\n  const [holder, setHolder] = useState(holdey ? holdey : regionSelected.name);\n  const [holder2, setHolder2] = useState(\n    holdey2 ? holdey2 : regionSelected.advanced\n  );\n  const [showSubmitPain, setShowSubmitPain] = useState(false);\n  const [painStatStore, setPainStatStore] = useState(0);\n\n  useEffect(\n    () => {\n      fetch(`/routines/`)\n        .then((r) => r.json())\n        .then((routines) => {\n          console.log(routines);\n          const filteredRoutines = routines.filter((routine) => {\n            return routine.muscle_group.region === holder;\n          });\n          console.log({ filteredRoutines });\n          setRoutines(filteredRoutines);\n        });\n    },\n    [holder, regionSelected.name]\n    // [params.id]\n  );\n  useEffect(() => {\n    localStorage.setItem(\"region\", holdey ? holdey : regionSelected.name);\n    localStorage.setItem(\n      \"advancedBackup\",\n      holdey2 ? holdey2 : regionSelected.advanced\n    );\n    setRegionSelected({\n      ...regionSelected,\n      regionBackup: holder,\n      advancedBackup: holder2,\n    });\n  }, [holder]);\n\n  function createNewRoutine() {\n    if (routines.length < 1) {\n      fetch(\"/routines\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          date: date.toLocaleDateString(),\n          routine: 1,\n          muscle_group_id: localStorage.getItem(\"muscle_group_id\"),\n          pain: painStatStore,\n        }),\n      })\n        .then((r) => r.json())\n        .then((postReturnData) => {\n          console.log({ postReturnData });\n          localStorage.setItem(\"routineNumber\", postReturnData.id);\n        });\n    } else {\n      fetch(\"/routines\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          date: date.toLocaleDateString(),\n          routine: routines.length + 1,\n          muscle_group_id: routines[0].muscle_group.id,\n          pain: painStatStore,\n        }),\n      })\n        .then((r) => r.json())\n        .then((postReturnData) => {\n          console.log({ postReturnData });\n          localStorage.setItem(\"routineNumber\", postReturnData.id);\n          localStorage.setItem(\"muscle_group_id\", routines[0].muscle_group.id);\n        });\n    }\n    navigate(\"/exercises\");\n  }\n\n  const mappedRoutines = routines.map((routine) => {\n    return (\n      <Col lg={6} className=\"pb-3 routineCard\">\n        <RoutineCard\n          key={uuid()}\n          routine={routine}\n          routines={routines}\n          setRoutines={setRoutines}\n        />\n      </Col>\n    );\n  });\n\n  return (\n    <div className=\"App-header\">\n      <Container className=\"pt-5\">\n        <Row>\n          <Col>\n            {showSubmitPain ? (\n              \"Submitted ✔️\"\n            ) : (\n              <>\n                <Form className=\"routineForm\">\n                  <Form.Label className=\"formLabelPain\">\n                    Select Current Pain level\n                  </Form.Label>\n                  <Form.Select\n                    DefaultValue=\"0\"\n                    placeholder=\"Enter Pain level\"\n                    onChange={(e) => {\n                      e.preventDefault();\n                      setPainStatStore(parseInt(e.target.value));\n                    }}\n                  >\n                    <option>0</option>\n                    <option>1</option>\n                    <option>2</option>\n                    <option>3</option>\n                    <option>4</option>\n                    <option>5</option>\n                    <option>6</option>\n                    <option>7</option>\n                    <option>8</option>\n                    <option>9</option>\n                    <option>10</option>\n                  </Form.Select>\n                  <Button\n                    className=\"routineButtonHidden\"\n                    variant=\"primary\"\n                    onClick={(e) => {\n                      e.preventDefault();\n                      setShowSubmitPain(true);\n                    }}\n                  >\n                    Submit\n                  </Button>\n                </Form>\n              </>\n            )}\n            <div>\n              <Col lg={12} className=\"pt-5\">\n                <Button\n                  className=\"routineButton\"\n                  onClick={createNewRoutine}\n                  variant=\"success\"\n                >\n                  Start New Exercise Session\n                </Button>\n              </Col>\n            </div>\n            <Col className=\"pt-5\">\n              <Button\n                className=\"routineButton1\"\n                onClick={() => navigate(\"/results\")}\n                variant=\"warning\"\n              >\n                Go to Results Page\n              </Button>\n            </Col>\n          </Col>\n\n          <Col className=\"pt-1 \">\n            <Row>{mappedRoutines}</Row>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default RoutineSelect;\n","import { useState, useEffect } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { useNavigate } from \"react-router-dom\";\n\nfunction SplashPage() {\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n  const navigate = useNavigate();\n\n  useEffect(() => handleShow(), []);\n\n  return (\n    <div className=\"splash App-headerColor\">\n      <video autoPlay loop id=\"video-background\" muted>\n        <source src=\"/videos/runningVid.mp4\" type=\"video/mp4\" />\n      </video>\n      <div className=\"splashCard\">\n        <div className=\"splashCardText\">\n          <h1>\n            Welcome\n            <br />\n            <br /> Pain Point is a website dedicated to solving those common\n            pesky injuries before they start!\n          </h1>\n\n          <Button\n            variant=\"outline-dark\"\n            size=\"lg\"\n            className=\"splashBTN\"\n            onClick={() => navigate(\"/bodyDiagram\")}\n          >\n            Enter{\" \"}\n          </Button>\n        </div>\n      </div>\n\n      {/* MODAL */}\n      <Modal\n        show={show}\n        onHide={handleClose}\n        backdrop=\"static\"\n        keyboard={false}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title style={{color: \"red\" }} >Warning!</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          This website is meant to be educational! These exercises are meant to\n          be preventative in nature only and do not serve as a prescription.\n          <br />\n          <br />\n          Please consult with your doctor or physical therapist before\n          undertaking any exercise.\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={handleClose}>\n            Understood\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n}\n\nexport default SplashPage;\n","import \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport LoginDecider from \"./Components/LoginDecider\";\nimport { useEffect, useState } from \"react\";\nimport { Routes, Route, useNavigate } from \"react-router-dom\";\nimport { Nav, Container, Navbar } from \"react-bootstrap\";\nimport BodyDiagram from \"./Components/BodyDiagram\";\nimport Exercises from \"./Components/Exercises\";\nimport Results from \"./Components/Results\";\nimport RoutineSelect from \"./Components/RoutineSelect\";\nimport SplashPage from \"./Components/SplashPage\";\n\nfunction App() {\n  const [user, setUser] = useState(null);\n  const [buttonValue, setButtonValue] = useState(false);\n  const [regionSelected, setRegionSelected] = useState({\n    name: \"\",\n    advanced: buttonValue,\n    regionBackup: \"\",\n    muscle_group_id: 0,\n  });\n  let navigate = useNavigate();\n\n  useEffect(() => {\n    fetch(\"/me\").then((r) => {\n      if (r.ok) {\n        r.json().then((user) => setUser(user));\n      }\n    });\n  }, []);\n\n  function handleLogoutClick() {\n    fetch(\"/logout\", { method: \"DELETE\" }).then((r) => {\n      if (r.ok) {\n        setUser(null);\n        localStorage.clear();\n        navigate(\"/\");\n      }\n    });\n  }\n\n  if (!user) return <LoginDecider setUser={setUser} />;\n\n  return (\n    <div className=\"App\">\n      <Navbar className=\"color-nav\" expand=\"lg\">\n        <Container>\n          <Navbar.Brand href=\"/bodydiagram\">\n            <img\n              alt=\"\"\n              src=\"/images/logoWhite.png\"\n              width=\"20\"\n              className=\"d-inline-block align-top logo\"\n            />\n            <span className=\"navTitle\">Pain Point</span>\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"me-auto \">\n              <Nav.Link href=\"/bodydiagram\">\n                <span className=\"navLink\">Home</span>\n              </Nav.Link>\n              <Nav.Link onClick={handleLogoutClick} className=\"navLink\">\n                <span className=\"navLink\">Logout</span>\n              </Nav.Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n\n      <Routes>\n        <Route path=\"/\" element={<SplashPage />} />\n        <Route\n          path=\"/bodyDiagram\"\n          element={\n            <BodyDiagram\n              setRegionSelected={setRegionSelected}\n              buttonValue={buttonValue}\n              setButtonValue={setButtonValue}\n              regionSelected={regionSelected}\n            />\n          }\n        />\n\n        <Route\n          path=\"/exercises\"\n          element={\n            <Exercises\n              regionSelected={regionSelected}\n              setRegionSelected={setRegionSelected}\n            />\n          }\n        />\n        <Route\n          path=\"/routines/\"\n          element={\n            <RoutineSelect\n              regionSelected={regionSelected}\n              setRegionSelected={setRegionSelected}\n            />\n          }\n        />\n        <Route path=\"/results\" element={<Results />} />\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}